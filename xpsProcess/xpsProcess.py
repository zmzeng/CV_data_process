# -*- coding: utf-8 -*-

import re
import sys
#import matplotlib
#matplotlib.use('Agg')
#import matplotlib.pyplot as plt


class xpsProcess(object):
    """
    Description: 
        This script read in .txt file generated by X-ray photoelectron spectroscopy
        and revise all data according to the standard energy of Carbon (default is 284.6eV).
        Finally all data after revising will be will be plot and 
        output in .txt file named with the atom types.

    Usage: 
        xpsProcess.py
            $ python xpsProcess.py <file2Process> [standardEnergyOfCarbon]

        xpsProcess.exe
            1. drag file to process to the ico of the xpsProcess.exe
            2. (alternative) call it in CMD or PowerShell: 
                $ `xpsProcess.exe <file2Process> [standardEnergyOfCarbon]`

    Args:
        file2Process (str): path to .txt file, define which file to process.
        standardEnergyOfCarbon (float, optional): standard energy of Carbon for revise. default is 284.6eV.

    Attributes:
        self.file2Process (str): path to .txt file, define which file to process.
        self.info (list): info of every process step.
        self.standardEnergyOfCarbon (float): standard energy of Carbon for revise.
        self.atoms (str): atom type found in the .txt file.
        self.spectrum (list): list of spectrum for each atom.
        self.delta (float)ï¼šdifference between experiment and standard energy of Carbon.

    Output: 
        Figure for each atom spectrum and save in .png files.
        Several .txt files named with the concerned atom types, in which contains the revaised energy, 
        counts and the original energy. 

    Check new version? goto: github.com/zmzeng/DataProcessing
    code by zmzeng12
    """

    def __init__(self, py, file2Process, standardEnergyOfCarbon=284.6):

        self.file2Process = file2Process
        self.info = []
        self.standardEnergyOfCarbon = float(standardEnergyOfCarbon)
        self.atoms = []
        self.spectrum = []
        self.delta = 0.0

        print('------>  ' + 'The file to process is ' + self.file2Process)
        self.info.append('------>  ' + 'The standard energy of C is set to ' + str(self.standardEnergyOfCarbon))
        

    def readFile(self):
        file = open(self.file2Process, 'r')
        line = file.readline()
        numberOfUnmatchedAtom = 0
        while line:
            # every atom data is start with line with 'Region'
            if line.find('Region') != -1:
                line, numberOfUnmatchedAtom = self.getData(file, numberOfUnmatchedAtom)
            else:
                break
        file.close()
        self.info.append('------>  ' + 'Found atoms: '+ str(self.atoms[1:]))

    def getData(self, file, numberOfUnmatchedAtom):
        """
        Sweep region is read from header lines and converts to atom type
        by self.regionMatchAtom(). (if no match found, then the data will be marked with 
        'unknown atoms <numberOfUnmatchedAtom>') 
        Then, atom type and atom experiment data will be put into self.atoms and self.spectrum.
        """
        line = file.readline()
        # use RegExr to match the atom type
        regionOfSweep = re.search(r'Original\t(\d*\.\d*\t\d*.\d*).*false\t([A-z ]*)', line).group(1)
        atom = re.search(r'Original\t(\d*\.\d*\t\d*.\d*).*false\t([A-z ]*)', line).group(2)
        if atom=='':        
            try:
                atom = self.regionMatchAtom(regionOfSweep)
            except Exception:
                if numberOfUnmatchedAtom == 0:
                    atom = 'whole_spectrum'
                else:
                    atom = ('unknown atoms %s' % numberOfUnmatchedAtom)
                numberOfUnmatchedAtom = numberOfUnmatchedAtom + 1
        self.atoms.append(atom)
        line = file.readline()
        line = file.readline()
        line = file.readline()
        line = file.readline()
        energyData = []
        countsData = []
        while line.find('Region') == -1 and line:
            if line.find('Layer') != -1 :
                line = file.readline()
                line = file.readline()
                line = file.readline()
            data = [float(x) for x in line.split('\t')]
            energyData.append(data[0])
            countsData.append(data[1])
            line = file.readline()
        self.spectrum.append([energyData, countsData])
        return line, numberOfUnmatchedAtom

    def regionMatchAtom(self, regionOfSweep):
        """ return atom types according to sweep region"""
        region2atom = {'520.000\t545.000': 'O', '840.000\t890.000': 'Ni', 
                        '170.000\t190.000': 'Zr', '275.000\t295.000': 'C',
                        '65.000\t85.000': 'Al', '925.000\t970.000': 'Cu',
                        '560.000\t580.000': 'Cu Auger', }
        return region2atom[regionOfSweep]

    def getDelta(self):
        """Find the energy of Carbon from experiment data. Compare the experiment value and the standard value
        to get the Delta for later data revising.

        Delta = Esignal - Estandard
        """
        energyData = self.spectrum[self.atoms.index('C')][0]
        countsData = self.spectrum[self.atoms.index('C')][1]
        indexOfMaxCounts = 0
        maxCounts = 0
        for i in range(0,len(countsData)):
            if maxCounts < countsData[i]:
                maxCounts = countsData[i]
                indexOfMaxCounts = i
            i += 1
        energyOfCarbon = energyData[indexOfMaxCounts]
        self.delta = energyOfCarbon - self.standardEnergyOfCarbon
        self.info.append('------>  ' + 'max position is ' + str(energyOfCarbon))
        self.info.append('------>  ' + 'max counts is ' + str(maxCounts))
        self.info.append('------>  ' + 'delta is ' + str(self.delta))

    def reviseData(self, energyData):
        """Revise data according to Delta.

        Estandard = Esignal - Delta"""
        # return str(data[0]-self.delta) + '  ' + str(data[1]) + '  ' + str(data[0])
        return [i-self.delta for i in energyData]

    def outputData(self):
        for i in range(0,len(self.atoms)):
            file = open(self.file2Process[0:-4] + '_' + self.atoms[i] + '_Result.txt', 'w')
            file.write(self.atoms[i] + ' generated by xpsProcess.exe\n')
            file.write('Energy(revised)  Counts  Energy\n')
            file.write('eV none eV \n')
            file.write(self.atoms[i] + ' ' + self.atoms[i] + ' ' + self.atoms[i] + '\n')
            for energyRevised, counts, energy in zip(self.reviseData(self.spectrum[i][0]), self.spectrum[i][1], self.spectrum[i][0]):
                file.write('%.2f  %s  %.2f \n' %(energyRevised, counts, energy))
            file.close()

    def plotData(self):
        for i in range(0, len(self.atoms)):
           plt.figure('XPS spectrum: ' + self.atoms[i])
           plt.plot(self.reviseData(self.spectrum[i][0]), self.spectrum[i][1])
           plt.xlabel('Energe (eV)')
           plt.ylabel('Counts')
           plt.title('XPS spectrum: ' + self.atoms[i])
           plt.gca().invert_xaxis() 
           plt.savefig(self.file2Process[0:-4] + '_' + self.atoms[i] + '.png')

    @property
    def response_info(self):
        return self.info

    def main(self):
        self.readFile()
        self.getDelta()
        self.outputData()
        #self.plotData()
        for i in self.info:
            print(i)

if __name__=='__main__':

    welcome = '''
#######################################################

X-ray photoelectron spectroscopy data process script  
                code by zmzeng.
                   20180314

#######################################################
'''
    print(welcome)

    try:
        test = xpsProcess(*sys.argv)
    except TypeError as e:
        print("Something wrong with your input.\n ")
        print(xpsProcess.__doc__)
        print(e)
        input('\npress Enter to quit.\n\n')
    else:
        try:
            test.main()
            print('                    ###############')
            print('                    #  all done!  #' )
            print('                    ###############\n')
            print('Press Enter to quit.\n')
            standardEnergyOfCarbon = input('Or \n\nInput the standard energy of Carbon if it is *NOT* 284.6\n')
            if standardEnergyOfCarbon:
                print('\n')
                test.standardEnergyOfCarbon = float(standardEnergyOfCarbon)
                test.main()
        except FileNotFoundError as e:
           print(e)
           input('\npress Enter to quit.\n\n')
        except Exception as e:
           print(e)
           input('\npress Enter to quit.\n\n')

